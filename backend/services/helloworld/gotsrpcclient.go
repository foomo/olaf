// Code generated by gotsrpc https://github.com/foomo/gotsrpc  - DO NOT EDIT.

package helloworld

import (
	net_http "net/http"

	gotsrpc "github.com/foomo/gotsrpc"
)

type ServiceGoTSRPCClient interface {
	HelloWorld(name string) (retHelloWorld_0 string, clientErr error)
	SetClientEncoding(encoding gotsrpc.ClientEncoding)
	SetTransportHttpClient(client *net_http.Client)
}

type tsrpcServiceGoTSRPCClient struct {
	URL      string
	EndPoint string
	Client   gotsrpc.Client
}

func NewDefaultServiceGoTSRPCClient(url string) ServiceGoTSRPCClient {
	return NewServiceGoTSRPCClient(url, "/services/helloworld")
}

func NewServiceGoTSRPCClient(url string, endpoint string) ServiceGoTSRPCClient {
	return NewServiceGoTSRPCClientWithClient(url, "/services/helloworld", nil)
}

func NewServiceGoTSRPCClientWithClient(url string, endpoint string, client *net_http.Client) ServiceGoTSRPCClient {
	return &tsrpcServiceGoTSRPCClient{
		URL:      url,
		EndPoint: endpoint,
		Client:   gotsrpc.NewClientWithHttpClient(client),
	}
}

func (tsc *tsrpcServiceGoTSRPCClient) SetClientEncoding(encoding gotsrpc.ClientEncoding) {
	tsc.Client.SetClientEncoding(encoding)
}

func (tsc *tsrpcServiceGoTSRPCClient) SetTransportHttpClient(client *net_http.Client) {
	tsc.Client.SetTransportHttpClient(client)
}
func (tsc *tsrpcServiceGoTSRPCClient) HelloWorld(name string) (retHelloWorld_0 string, clientErr error) {
	args := []interface{}{name}
	reply := []interface{}{&retHelloWorld_0}
	clientErr = tsc.Client.Call(tsc.URL, tsc.EndPoint, "HelloWorld", args, reply)
	return
}

type AdminServiceGoTSRPCClient interface {
	HelloAdmin() (retHelloAdmin_0 string, clientErr error)
	SetClientEncoding(encoding gotsrpc.ClientEncoding)
	SetTransportHttpClient(client *net_http.Client)
}

type tsrpcAdminServiceGoTSRPCClient struct {
	URL      string
	EndPoint string
	Client   gotsrpc.Client
}

func NewDefaultAdminServiceGoTSRPCClient(url string) AdminServiceGoTSRPCClient {
	return NewAdminServiceGoTSRPCClient(url, "/services/helloworld-admin")
}

func NewAdminServiceGoTSRPCClient(url string, endpoint string) AdminServiceGoTSRPCClient {
	return NewAdminServiceGoTSRPCClientWithClient(url, "/services/helloworld-admin", nil)
}

func NewAdminServiceGoTSRPCClientWithClient(url string, endpoint string, client *net_http.Client) AdminServiceGoTSRPCClient {
	return &tsrpcAdminServiceGoTSRPCClient{
		URL:      url,
		EndPoint: endpoint,
		Client:   gotsrpc.NewClientWithHttpClient(client),
	}
}

func (tsc *tsrpcAdminServiceGoTSRPCClient) SetClientEncoding(encoding gotsrpc.ClientEncoding) {
	tsc.Client.SetClientEncoding(encoding)
}

func (tsc *tsrpcAdminServiceGoTSRPCClient) SetTransportHttpClient(client *net_http.Client) {
	tsc.Client.SetTransportHttpClient(client)
}
func (tsc *tsrpcAdminServiceGoTSRPCClient) HelloAdmin() (retHelloAdmin_0 string, clientErr error) {
	args := []interface{}{}
	reply := []interface{}{&retHelloAdmin_0}
	clientErr = tsc.Client.Call(tsc.URL, tsc.EndPoint, "HelloAdmin", args, reply)
	return
}
